{
	"info": {
		"_postman_id": "b32f9edc-bbb0-4101-8f76-f774a58ffc2f",
		"name": "Postman_27",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CR_1",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "CR_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  2. Спарсить response body в json.\r",
							"\r",
							"let jon = pm.response.json ()\r",
							"\r",
							"// 3.  Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test('Проверить, что name в ответе равно name s request', function () {\r",
							"    pm.expect(jon.name).to.eql('viktor')\r",
							"})\r",
							"\r",
							"// 4. . Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function () {\r",
							"   pm.expect(jon.age).to.eql('24');\r",
							"});\r",
							"\r",
							"// 5.  Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request\", function () {\r",
							"   pm.expect(jon.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 6. Спарсить request.\r",
							"\r",
							"let neu = request.data\r",
							"\r",
							"// 7. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test('Проверить, что name в ответе равно name s request - name забрать из request', function () {\r",
							"    pm.expect(neu.name).to.eql(jon.name)});\r",
							"\r",
							"// 8. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test('Проверить, что age в ответе равно age s request - age забрать из request', function () {\r",
							"    pm.expect(neu.age).to.eql(jon.age)});\r",
							"\r",
							"// 9, Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let pow = jon.salary\r",
							"let pit = String(pow)\r",
							"\r",
							"pm.test('Проверить, что age в ответе равно salary s request - salary забрать из request', function () {\r",
							"    pm.expect(neu.salary).to.eql(pit)});\r",
							"\r",
							"// 10. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(\"family = \" ,jon.family)\r",
							"\r",
							"// 11. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Проверить что u_salary_1_5_year в ответе равно salary*4 - salary забрать из request)\", function () {\r",
							"    pm.expect(neu.salary*4).to.eql(jon.family.u_salary_1_5_year);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "viktor",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CR_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json.\r",
							"\r",
							"let niva = pm.response.json()\r",
							"\r",
							"// 3. Спарсить request\r",
							"\r",
							"let lain = pm.request.url.query.toObject()\r",
							"\r",
							"// 4.  Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Проверить, что name в ответе равно name s request - name забрать из request.)\", function () {\r",
							"   pm.expect(niva.name).to.eql(lain.name);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Проверить, что age в ответе равно age s request - age забрать из request.)\", function () {\r",
							"    pm.expect(niva.age).to.eql(lain.age);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let good = niva.salary\r",
							"let main = String(good)\r",
							"\r",
							"pm.test(\"Проверить, что salary в ответе равно salary s request - salary забрать из request.)\", function () {\r",
							"   pm.expect(main).to.eql(lain.salary);\r",
							"});\r",
							"\r",
							"// 7.Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(\"family = \" , niva.family)\r",
							"\r",
							"// 8. Проверить, что у параметра dog есть параметры name\r",
							"\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры name\", function () { \r",
							"    pm.expect(niva.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Проверить, что у параметра dog есть параметры age.\", function () { \r",
							"    pm.expect(niva.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// 10.  Проверить, что параметр name имеет значение Luky\r",
							"\r",
							"pm.test(\"Проверить, что параметр name имеет значение Luky\", function () { \r",
							"    pm.expect(niva.family.pets.dog.name).to.have.equal('Luky');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Проверить, что параметр age имеет значение 4.\", function () { \r",
							"    pm.expect(niva.family.pets.dog.age).to.have.equal(4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=viktor&age=24&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "viktor"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CR_4",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "CR_4",
					"host": [
						"CR_4"
					]
				}
			},
			"response": []
		},
		{
			"name": "CR_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json\r",
							"\r",
							"let cr = pm.response.json ()\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"\r",
							"let mok = request.data \r",
							"\r",
							"// 4.  Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\" Проверить, что json response имеет параметр start_qa_salary\", function () {\r",
							"     pm.expect(cr).to.have.any.keys(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"  pm.expect(cr).to.have.any.keys(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 8.  Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(cr).to.any.keys('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(cr).to.have.any.keys(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"роверить, что json response имеет параметр person\", function () {\r",
							"pm.expect(cr).to.have.any.keys(\"person\");\r",
							"});\r",
							"\r",
							"// 11.  Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let miz = cr.start_qa_salary\r",
							"let moon = String(miz)\r",
							"\r",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request \", function () {\r",
							"      pm.expect(moon).to.eql(mok.salary);\r",
							"});\r",
							"\r",
							" // 12. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2\", function () {\r",
							"    pm.expect(cr.qa_salary_after_6_months).to.eql(mok.salary*2);\r",
							"});\r",
							"\r",
							"// 13.  Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2\", function () {\r",
							"   pm.expect(cr.qa_salary_after_12_months).to.eql(mok.salary*2.7);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3\", function () {\r",
							"      pm.expect(cr['qa_salary_after_1.5_year']).to.eql(mok.salary*3.3);\r",
							"});\r",
							"\r",
							"// 15.  Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8\", function () {\r",
							"    pm.expect(cr['qa_salary_after_3.5_years']).to.eql(mok.salary*3.8);\r",
							"});\r",
							"\r",
							" // 16. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let buz = cr.person.u_name[1]\r",
							"let flou = String(buz)\r",
							"\r",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary\", function () {\r",
							"    pm.expect(flou).to.eql(mok.salary);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let biub = cr.person.u_age\r",
							"let kill = String(biub)\r",
							"\r",
							"pm.test(\"Проверить, что что параметр u_age равен age из reques\", function () {\r",
							"    pm.expect(kill).to.eql(mok.age);\r",
							"});\r",
							"\r",
							"// 18.  Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(cr.person.u_salary_5_years).to.eql(mok.salary*4.2);\r",
							"});\r",
							"\r",
							"// 19.  ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"\r",
							"let git = [cr.person.u_age, cr.person.u_name, cr.person.u_salary_5_years];\r",
							"\r",
							"for (let i = 0; i < 3; i++)\r",
							"console.log(git[i]);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
